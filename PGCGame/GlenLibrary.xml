<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlenLibrary</name>
    </assembly>
    <members>
        <member name="T:Glib.WinForms.Shapes.XShape">
            <summary>
            A figure which is an X.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Shapes.Shape">
            <summary>
            A basic shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.#ctor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new shape.
            </summary>
            <param name="x">The X position of the shape.</param>
            <param name="y">The Y position of the shape.</param>
            <param name="color">The color of the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.Draw(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draw the shape to the specified graphics object with the default color.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the shape to the specified graphics object.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Color">
            <summary>
            The color of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.X">
            <summary>
            The X position of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Position">
            <summary>
            Gets or sets the position of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Y">
            <summary>
            The Y position of the shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.XShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new X shape.
            </summary>
            <param name="x">The first X position.</param>
            <param name="y">The first Y position.</param>
            <param name="x1">The second X position.</param>
            <param name="y1">The second Y position.</param>
            <param name="distanceBetweenX">The distance between the top two points of the X shape.</param>
            <param name="color">The color of the X.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.XShape.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the X to the specified graphics.
            </summary>
            <param name="gfx">The graphics to draw the X to.</param>
            <param name="color">The color to draw the X with.</param>
            <param name="fill">(Ignored parameter, cannot fill an X)</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.XDistance">
            <summary>
            The distance between the top two corners of the X (along the X axis).
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.X1">
            <summary>
            The second X coordinate of the X.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.Position">
            <summary>
            Gets the X, Y, X1, and Y1 positions of the XShape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.Y1">
            <summary>
            The second Y coordinate of the X.
            </summary>
        </member>
        <member name="T:Glib.WinForms.FormValidator">
            <summary>
            A class validating forms to ensure all <see cref="T:Glib.WinForms.IRequiredField"/>s are complete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.FormValidator.#ctor(System.Windows.Forms.Form)">
            <summary>
            Create a new FormValidator validating the specified form.
            </summary>
            <param name="formToValidate">The form which contains components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.#ctor(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Create a new FormValidator validating the specified controls.
            </summary>
            <param name="comToValidate">Components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.AddFormComponents(System.Windows.Forms.Form)">
            <summary>
            Add the components of the specified form to be validated.
            </summary>
            <param name="formToAdd">The form which contains components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.ValidateForm(System.Windows.Forms.ErrorProvider)">
            <summary>
            Validate these controls for errors, marking the controls with errors as errored using the specified ErrorProvider.
            </summary>
            <param name="errors">The ErrorProvider to use for erroring out controls.</param>
            <returns>Whether or not the form is complete.</returns>
        </member>
        <member name="M:Glib.WinForms.FormValidator.ValidateForm(System.Windows.Forms.Form)">
            <summary>
            Validate the controls on the specified form.
            </summary>
            <param name="testForm">The form to validate.</param>
            <returns>Whether or not the form has all valid controls.</returns>
        </member>
        <member name="P:Glib.WinForms.FormValidator.ControlsToValidate">
            <summary>
            Gets the collection of controls to validate.
            </summary>
        </member>
        <member name="P:Glib.WinForms.FormValidator.IsComplete">
            <summary>
            Gets a boolean representing whether or not all required controls are completed.
            </summary>
        </member>
        <member name="T:Glib.XNA.TextureFactory">
            <summary>
            A class for creating textures with specific patterns.
            </summary>
        </member>
        <member name="M:Glib.XNA.TextureFactory.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new TextureFactory with the specified GraphicsDevice.
            </summary>
            <param name="device">The GraphicsDevice this TextureFactory will use to create Texture2D objects.</param>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateTexture(System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a texture using the specified function.
            </summary>
            <param name="width">The width of the new texture.</param>
            <param name="height">The height of the new texture.</param>
            <param name="colorDetermine">The function to use for determining the color of the specified point in the texture.</param>
            <returns>A new texture with the specified colors at the specified points.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateSquare(System.Int32)">
            <summary>
            Creates a white square of the specified size.
            </summary>
            <param name="size">The width and height of the square.</param>
            <returns>A white texture which is a square of the specified size.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateSquare(System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a square of the specified size and color.
            </summary>
            <param name="size">The width and height of the square.</param>
            <param name="color">The color of the square.</param>
            <returns>A texture which is a square of the specified size and color.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateRectangle(System.Int32,System.Int32)">
            <summary>
            Creates a white rectangle of the specified size.
            </summary>
            <param name="width">The width of the new rectangular texture.</param>
            <param name="height">The height of the new rectangular texture.</param>
            <returns>A white rectangular texture of the specified size.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateRectangle(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a rectangle of the specified size and color.
            </summary>
            <param name="width">The width of the new rectangular texture.</param>
            <param name="height">The height of the new rectangular texture.</param>
            <param name="color">The color of the new rectangular texture.</param>
            <returns>A rectangular texture of the specified size and color.</returns>
        </member>
        <member name="P:Glib.XNA.TextureFactory.Graphics">
            <summary>
            Gets the GraphicsDevice used for creating textures.
            </summary>
        </member>
        <member name="P:Glib.XNA.TextureFactory.WhitePixel">
            <summary>
            Gets a one by one texture which is a white pixel.
            </summary>
            <remarks>
            This operation is expensive, so make minimal calls to it.
            </remarks>
        </member>
        <member name="T:Glib.Services.Service">
            <summary>
            An abstract service class representing repeatedly executing code.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.#ctor">
            <summary>
            Create a new service.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.Main">
            <summary>
            The main service code, that runs repeatedly every tick of ServiceTimer.
            </summary>
        </member>
        <member name="F:Glib.Services.Service.ServiceTimer">
            <summary>
            The underlying timer that is ticking the service.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.OnStart(System.String[])">
            <summary>
            Start the service timer.
            </summary>
            <param name="args">Data passed by the start command.</param>
        </member>
        <member name="M:Glib.Services.Service.OnStop">
            <summary>
            Stop the service timer.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.delay">
            <summary>
            The delay, in milliseconds, between executions of the service code.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.IsPrivileged">
            <summary>
            A boolean representing whether or not this service needs administrator-level permissions on the local system.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.Delay">
            <summary>
            The delay, in milliseconds, between executions of the service code.
            </summary>
        </member>
        <member name="T:Glib.XNA.XnaExtensions">
            <summary>
            Extensions onto XNA objects.
            </summary>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCharSize(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Get the average size per character for this SpriteFont.
            </summary>
            <param name="font">The font to measure the character size of.</param>
            <param name="measurementString">The string to use for determining the average size of one character.</param>
            <returns>The average character size for this SpriteFont.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AsPositionable(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the specified vector to a positionable object.
            </summary>
            <param name="pos">The vector to convert to a positionable.</param>
            <returns>A positionable object with the position of the Vector2.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCenterPosition(Glib.XNA.ISizable,Microsoft.Xna.Framework.Graphics.Viewport,System.Boolean)">
            <summary>
            Get the position which would be required to center the specified sizable object to the specified Viewport.
            </summary>
            <param name="obj">The sizable object to center.</param>
            <param name="centerToViewport">The viewport to center the ISizable to.</param>
            <param name="centerIsOrigin">Whether or not the center of the specified ISizable is the origin.</param>
            <returns>The position which would be required to center the specified sizable object.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.CreateTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Predicate{Microsoft.Xna.Framework.Point},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,System.Int32)">
            <summary>
            Create a 2-color Texture2D on the specified graphics device of the specified size.
            </summary>
            <param name="graphics">The GraphicsDevice to create the Texture2D on.</param>
            <param name="colorDetermine">The predicate to use for determining the color of every individual pixel in the texture.</param>
            <param name="trueColor">The color to set a pixel to when the predicate returns true.</param>
            <param name="falseColor">The color to set a pixel to when the predicate returns false.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A 2-color Texture2D of the specified size.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.ToAngle(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Convert a vector to a rotation angle in radians.
            </summary>
            <param name="vector">Vector2 to translate to rotation angle.</param>
            <param name="initialOffsetAngle">Rotation angle, in radians, by which the texture is offset. A rotation of zero means up.</param>
            <returns>Rotation angle, in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AngleToVector(System.Single)">
            <summary>
            Convert an angle in radians to a Vector2.
            </summary>
            <param name="angle">The angle to translate to a vector.</param>
            <returns>A vector representing a rotation angle in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Draw the specified Sprite to this SpriteBatch.
            </summary>
            <param name="sb">The SpriteBatch to draw to.</param>
            <param name="sprToDraw">The sprite to draw.</param>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AngleToVector(System.Double)">
            <summary>
            Convert an angle in radians to a Vector2.
            </summary>
            <param name="angle">The angle to translate to a vector.</param>
            <returns>A vector representing a rotation angle in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetDistance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the distance between two points.
            </summary>
            <param name="startPoint">The starting point.</param>
            <param name="endPoint">The ending point.</param>
            <returns>The distance between these two Vector2 positions.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetHypotenuse(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the hypotenuse from the right triangle represented by this vector (side A = X, side B = Y).
            </summary>
            <param name="triangle">The known triangle sides represented as a Vector2 (must be a right triangle).</param>
            <returns>The length of the triangle's hypotenuse. Inaccurate if it is not a right triangle.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.IsRightTriangle(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether or not the specified triangle is a right triangle (where X is side A, Y is side B, and Z is the hypoentuse).
            </summary>
            <param name="triangle">The triangle to use when determining if this is a right triangle.</param>
            <returns>Whether or not the specified triangle is a right triangle.</returns>
        </member>
        <member name="P:Glib.XNA.XnaExtensions.IsGuideVisible">
            <summary>
            Gets a boolean indicating whether or not the GamerServices guide is visible.
            </summary>
            <remarks>
            This property will return false in the case of lack of availability of gamer services.
            </remarks>
        </member>
        <member name="T:Glib.WinForms.Controls.SqlParameterTextBox">
            <summary>
            A SQL parameter provider in the form of a text box.
            </summary>
        </member>
        <member name="T:Glib.SQL.ISQLParameterProvider">
            <summary>
            An interface representing a provider of SQL parameter information.
            </summary>
        </member>
        <member name="P:Glib.SQL.ISQLParameterProvider.ParameterName">
            <summary>
            The name of the provided parameter.
            </summary>
        </member>
        <member name="P:Glib.SQL.ISQLParameterProvider.ParameterValue">
            <summary>
            The value of the provided parameter.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.SqlParameterTextBox.#ctor(System.String)">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.SqlParameterTextBox.ParameterName">
            <summary>
            The name of the represented SQL parameter.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.SqlParameterTextBox.ParameterValue">
            <summary>
            The string value of the text box, which is the value of the SQL parameter.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.MouseFollowParams">
            <summary>
            The parameters to use for automatically following the mouse every update.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.MouseFollowParams.MouseFollowSpeed">
            <summary>
            The speed of mouse following.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.MouseFollowParams.#ctor(System.Single)">
            <summary>
            Creates a new MouseFollowParams.
            </summary>
            <param name="speed">The speed of mouse following.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.MouseFollowParams.#ctor(System.Single,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Creates a new MouseFollowParams.
            </summary>
            <param name="speed">The speed of mouse following.</param>
            <param name="initialRotation">The initial rotation of the Sprite.</param>
        </member>
        <member name="F:Glib.XNA.SpriteLib.MouseFollowParams.InitialRotation">
            <summary>
            The initial rotation of the Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.MouseFollowParams.DoesFollow">
            <summary>
            Gets a boolean indicating whether or not the mouse is being followed.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.UpdateParamaters">
            <summary>
            A structure representing things to automatically do when Update() is called on a Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.UpdateParamaters.UpdateX">
            <summary>
            Whether or not to acknowledge the XIncrease value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.UpdateParamaters.MouseFollow">
            <summary>
            The parameters for automatic mouse following.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.UpdateParamaters.UpdateY">
            <summary>
            Whether or not to acknowledge the YIncrease value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.UpdateParamaters.FixEdgeOff">
            <summary>
            Whether or not to automatically fix the sprite from going off the edge based on XIncrease and YIncrease values.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.UpdateParamaters.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new UpdateParamaters with the values specified.
            </summary>
            <param name="UpdateXParam">Whether or not to acknowledge the XIncrease value.</param>
            <param name="UpdateYParam">Whether or not to acknowledge the YIncrease value.</param>
            <param name="FixEdgeOffParam">Whether or not to automatically fix the sprite from going off the edge.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.UpdateParamaters.#ctor(System.Boolean,System.Boolean,Glib.XNA.SpriteLib.MouseFollowParams)">
            <summary>
            Create a new UpdateParamaters with the values specified.
            </summary>
            <param name="UpdateXParam">Whether or not to acknowledge the XIncrease value.</param>
            <param name="UpdateYParam">Whether or not to acknowledge the YIncrease value.</param>
            <param name="followParams">The parameters for mouse following.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.UpdateParamaters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create a new UpdateParamaters with the values specified, and the default (false) for FixEdgeOff.
            </summary>
            <param name="UpdateXParam">Whether or not to acknowledge the XIncrease value.</param>
            <param name="UpdateYParam">Whether or not to acknowledge the YIncrease value.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.TextSprite">
            <summary>
            An ISprite representing text.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISprite">
            <summary>
            A sprite, supporting updates and draws.
            </summary>
        </member>
        <member name="T:Glib.XNA.IDrawableComponent">
            <summary>
            A basic drawable component.
            </summary>
        </member>
        <member name="M:Glib.XNA.IDrawableComponent.Draw">
            <summary>
            Draw the IDrawableComponent.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISprite.Draw">
            <summary>
            Draw the ISprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISprite.Update">
            <summary>
            Update the ISprite as applicable (do logic here).
            </summary>
        </member>
        <member name="T:Glib.XNA.IPositionable">
            <summary>
            A basic component which has a position.
            </summary>
        </member>
        <member name="P:Glib.XNA.IPositionable.Position">
            <summary>
            Gets or sets the position of the IPositionable.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISizedScreenObject">
            <summary>
            Represents a sizable, positionable, screen object.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISizable">
            <summary>
            Represents a sizable object.
            </summary>
        </member>
        <member name="P:Glib.XNA.ISizable.Width">
            <summary>
            The width of the object.
            </summary>
        </member>
        <member name="P:Glib.XNA.ISizable.Height">
            <summary>
            The height of the object.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.ShadowColor">
            <summary>
            The color that, if applicable, this TextSprite should be shadowed with.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.Draw">
            <summary>
            Draw this text sprite to the SpriteBatch.
            Does not begin or end the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.Update">
            <summary>
            Update the TextSprite. Just calls the Updated event by default.
            </summary>
            <remarks>
            Uses the InputLib.MouseManager.CurrentMouseState for mouse data.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.CallKeyboardClickEvent">
            <summary>
            Whether or not to call Clicked events for keypresses of Enter.
            </summary>
            <remarks>
            For this to take effect, KeyboardManager must be updated.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.HoverColor">
            <summary>
            The color to use when hovering over the TextSprite, if hovering is enabled.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.NonHoverColor">
            <summary>
            The color to use when not hovering over the TextSprite, if hovering is enabled.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Font">
            <summary>
            The SpriteFont to use.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Color">
            <summary>
            The color to draw the text as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.SpriteBatch">
            <summary>
            The SpriteBatch to draw this text sprite to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Scale">
            <summary>
            The scale of this TextSprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Rotation">
            <summary>
            The rotation of the TextSprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.TextChanged">
            <summary>
            An event fired when the text of this TextSprite changes.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsShadowed">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprie is shadowed.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Visible">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprite is visible.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.Clicked">
            <summary>
            An event fired after every click of this TextSprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.Pressed">
            <summary>
            An event fired after every click or keyboard selection of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsSelected">
            <summary>
            Gets or sets a boolean indicating whether or not this is a selected TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsManuallySelectable">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprite will be selected by ways other than the mouse cursor.
            If this is true, the mouse cursor will be ignored.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.ParentSprite">
            <summary>
            Gets or sets the parent sprite (such as a button image) of this TextSprite.
            If not null, all selection, click, and positioning logic logic will be performed relative to this Sprite.
            This includes centering this TextSprite to the specified ParentSprite upon set.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsHoverable">
            <summary>
            Gets or sets a boolean indicating whether or not to apply hover effects to this TextSprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.Updated">
            <summary>
            An event called after every update of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Width">
            <summary>
            Gets the width of the TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Height">
            <summary>
            Gets the height of the TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.X">
            <summary>
            The current X coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Y">
            <summary>
            The current Y coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Text">
            <summary>
            Gets or sets the text of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Position">
            <summary>
            The position to draw the text.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.InputManagerComponent">
            <summary>
            Represents a game component responsible for updating input management classes.
            </summary>
            <remarks>
            This is intended to be added to the Components collection of a game to handle updating of input related classes.
            </remarks>
        </member>
        <member name="M:Glib.XNA.InputLib.InputManagerComponent.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a new InputManagerComponent.
            </summary>
            <param name="game">The Game associated with this component.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.InputManagerComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the InputManagerComponent, calling the Update method on all input related classes.
            </summary>
            <param name="gameTime">The current GameTime.</param>
        </member>
        <member name="T:Glib.WinForms.Shapes.Triangle">
            <summary>
            A triangle shape in windows forms.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Triangle.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="posA">Point A of the triangle.</param>
            <param name="posB">Point B of the triangle.</param>
            <param name="posC">Point C of the triangle.</param>
            <param name="color">The color of the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Triangle.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the triangle to the specified graphics object.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Triangle.PositionB">
            <summary>
            The upper corner of the triangle.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Triangle.PositionC">
            <summary>
            The right hand corner of the triangle.
            </summary>
        </member>
        <member name="T:Glib.TypeUtils`1">
            <summary>
            A static class providing convenience utilities on types.
            </summary>
            <typeparam name="T">The type to provide utilities of.</typeparam>
        </member>
        <member name="M:Glib.TypeUtils`1.IsNumeric">
            <summary>
            Indicates whether the specified type is numeric.
            </summary>
            <returns>Whether or not the type parameter T is numeric.</returns>
        </member>
        <member name="P:Glib.TypeUtils`1.TruePredicate">
            <summary>
            Gets a predicate that will always return a true value.
            </summary>
        </member>
        <member name="P:Glib.TypeUtils`1.FalsePredicate">
            <summary>
            Gets a predicate that will always return a false value.
            </summary>
        </member>
        <member name="T:Glib.Utils">
            <summary>
            A static class providing convenience utilities.
            </summary>
        </member>
        <member name="P:Glib.Utils.NumericTypes">
            <summary>
            Gets an array of numerical types.
            </summary>
        </member>
        <member name="T:Glib.SQL.SqlExtensions">
            <summary>
            Various SQL-related extensions.
            </summary>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.IsNull(System.Object)">
            <summary>
            Check if the specified object is either null or DBNull.
            </summary>
            <param name="nullCheck">The object to check against null and DBNull.</param>
            <returns>Whether or not the specified object is null or DBNull.</returns>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.OpenIfNeeded(System.Data.SqlClient.SqlConnection)">
            <summary>
            Open the specified SqlConnection if it is not opened already.
            </summary>
            <param name="conn">The connection to open.</param>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.GetParameter(Glib.SQL.ISQLParameterProvider)">
            <summary>
            Get the SQL parameter represented by the specified ISQLParameterProvider.
            </summary>
            <param name="provider">The ISQLParameterProvider to get the parameter data from.</param>
            <returns>A SqlParameter representing the information stored by the ISQLParameterProvider.</returns>
        </member>
        <member name="T:Glib.SQL.StoredProcedure">
            <summary>
            A class representing a SQL stored procedure.
            </summary>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.AddParameter(System.String,System.Object)">
            <summary>
            Add a SqlParameter with the specified name and value to the collection of parameters.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.AddParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add the specified SqlParameters to the parameters of the underlying command.
            </summary>
            <param name="parameters">The parameters to add.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.RemoveParameter(System.String)">
            <summary>
            Remove the SqlParameter with the specified name.
            </summary>
            <param name="name">The name of the SqlParameter to remove.</param>
            <returns>Whether or not the command was successfully removed.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.#ctor(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Create a new StoredProcedure.
            </summary>
            <param name="connection">The SqlConnection used to connect to the database.</param>
            <param name="procName">The name of the stored procedure to execute.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.#ctor(System.String,System.String)">
            <summary>
            Create a new StoredProcedure.
            </summary>
            <param name="connectionString">The connecting string used to connect to the database.</param>
            <param name="procName">The name of the stored procedure to execute.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.Finalize">
            <summary>
            A destructor closing all known open SqlDataReaders associated with this command.
            </summary>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteDataReader">
            <summary>
            Execute this StoredProcedure, and return the results as a SqlDataReader.
            </summary>
            <remarks>
            Must be closed after use.
            </remarks>
            <returns>A SqlDataReader representing the results of this command.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteScalar">
            <summary>
            Executes this StoredProcedure, and return the results as a scalar value (int).
            </summary>
            <returns>The results of this command as a scalar value (int).</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.Execute">
            <summary>
            Executes this StoredProcedure, and return the number of rows affected.
            </summary>
            <returns>The number of rows affected by this command.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteDataTable">
            <summary>
            Execute this StoredProcedure, and return the results as a DataTable.
            </summary>
            <returns>A DataTable representing the results of this command.</returns>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Connection">
            <summary>
            The SqlConnection used to connect to the database.
            </summary>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Parameters">
            <summary>
            Get the collection of <seealso cref="T:System.Data.SqlClient.SqlParameter"/>s associated with this command.
            </summary>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Command">
            <summary>
            The underlying stored procedure executed against the database.
            </summary>
            <remarks>
            Cannot be set to a non stored procedure command.
            </remarks>
        </member>
        <member name="E:Glib.SQL.StoredProcedure.CommandCompleted">
            <summary>
            An event called after the completion of the underlying command.
            </summary>
        </member>
        <member name="T:Glib.SQL.CommandWrapper">
            <summary>
            A wrapper class around a SqlCommand, defaulting to a stored procedure.
            </summary>
        </member>
        <member name="F:Glib.SQL.CommandWrapper.Command">
            <summary>
            The stored procedure this class is wrapping.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.Finalize">
            <summary>
            A destructor closing all open SqlDataReaders.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AddParamater(System.Data.SqlClient.SqlParameter)">
            <summary>
            Add a SqlParamater to the command's arguments.
            </summary>
            <param name="param">The SqlParamater to add.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AddParamaters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Adds multiple SqlParamaters to the command's arguments.
            </summary>
            <param name="paramaters">The SqlParamaters to add.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection and stored procedure.
            </summary>
            <param name="connect">The SqlConnection to connect to the database with.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ChangeToStandardSqlCommand">
            <summary>
            HIGHLY DISRECOMMENDED UNLESS COMMAND HAS NO USER INPUT, FOR SECURITY'S SAKE.
            Change the command type to a regular SQL statement.
            Vulnerable to SQL injection attacks.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AppendUntrustedInputToCommand(System.String,System.Boolean,System.Boolean)">
            <summary>
            Append untrusted user input to the existing SQL command text.
            Should not be relied on for security of a SQL command.
            Does not escape text.
            Throws a SecurityException in case of detected suspicious character.
            </summary>
            <exception cref="T:System.Exception">Thrown if a disallowed sharacter sequence is detected.</exception>
            <param name="input">The user input to append to the SQL command.</param>
            <param name="allowQuotes">Whether or not to allow quotes in the user input string.</param>
            <param name="allowOr">Whether or not to allow the world "OR" in the user input string.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.String,System.String)">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection and stored procedure.
            </summary>
            <param name="connectStr">The connection string to use to connect to the database.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ExecuteReader">
            <summary>
            Execute this command as a SqlDataReader.
            It is important to close this data reader after use.
            Thedestructor's automatic closing of all open SqlDataReaders should not be relied on.
            </summary>
            <returns>A SqlDataReader containing the results of the command.</returns>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ExecuteDataTable">
            <summary>
            Execute this SqlCommand, and put the results in a DataTable.
            </summary>
            <returns>A DataTable containing the results of the command.</returns>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.Execute">
            <summary>
            Execute this command without returning any output.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection, stored procedure, and paramaters.
            </summary>
            <param name="connect">The SqlConnection to connect to the database with.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
            <param name="paramaters">The SqlParamaters to add to this SqlCommand.</param>
        </member>
        <member name="P:Glib.SQL.CommandWrapper.Paramaters">
            <summary>
            Get the paramaters passed with this SqlCommand.
            </summary>
        </member>
        <member name="T:Glib.PrimeList`1">
            <summary>
            A list of purely prime numbers.
            </summary>
            <typeparam name="T">A whole number numerical type.</typeparam>
        </member>
        <member name="M:Glib.PrimeList`1.#ctor">
            <summary>
            Create a new prime number list.
            </summary>
        </member>
        <member name="M:Glib.PrimeList`1.#ctor(`0,`0)">
            <summary>
            Make a new list with all prime numbers from startpoint to endpoint.
            </summary>
            <param name="startpoint">The inclusive lower number.</param>
            <param name="endpoint">The exclusive upper number.</param>
        </member>
        <member name="M:Glib.PrimeList`1.IsPrime(System.Object)">
            <summary>
            Returns whether or not the specified number is prime.
            </summary>
            <param name="value">The number to check primeness.</param>
            <exception cref="T:System.ArgumentException">Thrown if value is not a valid number.</exception>
            <returns>Whether or not the specified number is prime</returns>
        </member>
        <member name="M:Glib.PrimeList`1.Add(`0)">
            <summary>
            Add the specified item to the list.
            </summary>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:Glib.PrimeList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item at a specified index into the list.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Glib.PrimeList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert a range of values to this list beginning at the specified index.
            </summary>
            <param name="index">The index to begin inserting values at.</param>
            <param name="values">The enumerable of values to insert.</param>
        </member>
        <member name="M:Glib.PrimeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of values to this PrimeList.
            </summary>
            <param name="values">The values to add.</param>
        </member>
        <member name="P:Glib.PrimeList`1.Item(System.Int32)">
            <summary>
            Access the number at the specified index in the array.
            </summary>
            <param name="index">The zero-based index in the list.</param>
            <returns>The number with the specified index in the list.</returns>
        </member>
        <member name="T:Glib.XNA.IGravitySource">
            <summary>
            An interface representing a gravity source.
            </summary>
        </member>
        <member name="M:Glib.XNA.IGravitySource.GetAttraction(Glib.XNA.IPositionable)">
            <summary>
            Gets the force of attraction for an object affected by this gravity.
            </summary>
            <param name="attracted">The object that is being attracted to this gravity source.</param>
            <returns>The amount to pull the object, in the X and Y axis, towards the gravity source.</returns>
        </member>
        <member name="P:Glib.XNA.IGravitySource.Position">
            <summary>
            Gets or sets the position of the gravity source.
            </summary>
        </member>
        <member name="T:Glib.XNA.ITexturable">
            <summary>
            A basic component which has a texture.
            </summary>
        </member>
        <member name="P:Glib.XNA.ITexturable.Texture">
            <summary>
            Gets or sets the texture of the ITexturable.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISpriteBatchManagerSprite">
            <summary>
            A basic sprite, supporting updates and draws with the option of toggling SpriteBatch management.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.Draw">
            <summary>
            Draw the ISpriteBatchManagerSprite, beginning and ending the SpriteBatch automatically.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.DrawNonAuto">
            <summary>
            Draw the ISpriteBatchManagerSprite, not beginning and ending the SpriteBatch automatically.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.Update">
            <summary>
            Update the ISpriteBatchManagerSprite as applicable (do logic here).
            </summary>
        </member>
        <member name="T:Glib.XNA.ITimerSprite">
            <summary>
            A basic sprite, supporting updates with a GameTime object passed in and draws.
            </summary>
        </member>
        <member name="M:Glib.XNA.ITimerSprite.Draw">
            <summary>
            Draw the ITimerSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.ITimerSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the ITimerSprite as applicable (do logic here), using a GameTime object.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteBuilder">
            <summary>
            A class to construct sprites easily.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Make a new SpriteBuilder.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.#ctor(Microsoft.Xna.Framework.Content.ContentManager,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Make a new SpriteBuilder.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetDrawRegion(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Set the DrawRegion of the Sprite.
            </summary>
            <param name="region">The new DrawRegion of the Sprite.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.RemoveDrawRegion">
            <summary>
            Remove the DrawRegion from the Sprite, drawing the entire Sprite.
            </summary>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Set the color of the Sprite under construction.
            </summary>
            <param name="c">The color to use.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetWidth(System.Single)">
            <summary>
            Set the width of the Sprite under construction via scaling.
            </summary>
            <param name="w">The new width.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetUpdateParamaters(Glib.XNA.SpriteLib.UpdateParamaters)">
            <summary>
            Set the <seealso cref="T:Glib.XNA.SpriteLib.UpdateParamaters"/> for this Sprite.
            </summary>
            <param name="u">The UpdateParamaters to use for this Sprite.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetViewport(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Set the viewport this Sprite should use.
            </summary>
            <param name="v">The Viewport this Sprite should use.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetVelocity(Glib.XNA.SpriteLib.Velocity)">
            <summary>
            Set the velocity of the sprite.
            </summary>
            <param name="v">The new Sprite velocity.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetSpeed(System.Single,System.Single)">
            <summary>
            Set the speed of this Sprite.
            </summary>
            <param name="xspeed">The speed in X.</param>
            <param name="yspeed">The speed in Y.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.RegisterDrawEvent(System.EventHandler)">
            <summary>
            Register an event for when the Sprite is drawn.
            </summary>
            <param name="drawEvent">The SpriteEventHandler for the Drawn event.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.RegisterMoveEvent(Glib.XNA.SpriteLib.SpriteMoveEventHandler)">
            <summary>
            Register an event for when the Sprite moves.
            </summary>
            <param name="moveEvent">The SpriteMoveEventHandler for the Move event.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.Build">
            <summary>
            Return the Sprite under construction.
            </summary>
            <returns>The Sprite under construction.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetHeight(System.Single)">
            <summary>
            Set the height of the Sprite under construction via scaling.
            </summary>
            <param name="h">The new height.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.RegisterUpdateEvent(System.EventHandler)">
            <summary>
            Register an update event handler for the Sprite under construction.
            </summary>
            <param name="updateEvent">The update event to register.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set the scale of the Sprite under construction.
            </summary>
            <param name="scale">The scale to assign to the Sprite.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteBuilder.SetScale(System.Single,System.Single)">
            <summary>
            Set the scale of the Sprite under construction.
            </summary>
            <param name="scalex">The X scale to assign to the Sprite.</param>
            <param name="scaley">The Y scale to assign to the Sprite.</param>
            <returns>This SpriteBuilder.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteBuilder.Built">
            <summary>
            Gets the Sprite under construction.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ProgressBar">
            <summary>
            Represents a progress bar.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Sprite">
            <summary>
            An implementation of ISprite with many features, such as updated, drawn, and moved events, an easily accessible position, configurable position changes per update, center-point support, and scale support.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.op_Explicit(Glib.XNA.SpriteLib.Sprite)~Microsoft.Xna.Framework.Rectangle">
            <summary>
            Convert the specified Sprite to a rectangle.
            </summary>
            <param name="spr">The Sprite to convert to a Rectangle.</param>
            <returns>The Rectangle representing the area of the Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.op_Implicit(Glib.XNA.SpriteLib.Sprite)~Glib.XNA.InputLib.ScreenRegion">
            <summary>
            Convert the specified Sprite to a screen region.
            </summary>
            <param name="spr">The Sprite to convert to a screen region.</param>
            <returns>The screen region representing the area of the Sprite (scale sensitive).</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.op_Explicit(Glib.XNA.SpriteLib.Sprite)~Microsoft.Xna.Framework.Graphics.Texture2D">
            <summary>
            Convert the specified Sprite to a texture.
            </summary>
            <param name="spr">The Sprite to convert to a Texture2D.</param>
            <returns>The texture of the Sprite.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.Speed">
            <summary>
            The speed of the sprite in X and Y.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.SpriteManager">
            <summary>
            The SpriteManager associated with this sprite, if any.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.SpriteBatch">
            <summary>
            The SpriteBatch used for drawing the sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.Scale">
            <summary>
            The scale at which to render the sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.Rotation">
            <summary>
            The current rotation of the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.MoveSprite(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Move this Sprite to the specified position, calling the Moved event, but not Move.
            </summary>
            <param name="newPos">The new position of the Sprite.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.IsMoveEventCanceled(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calls the Move event and returns whether or not it was canceled.
            </summary>
            <remarks>
            Calls an event; call only when neccesary.
            </remarks>
            <param name="newPos">The position to call the move event with.</param>
            <returns>Whether or not the called move event was cancelled.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.Color">
            <summary>
            The color of which to tint the sprite. Defaults to white.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.UpdateParams">
            <summary>
            The <see cref="T:Glib.XNA.SpriteLib.UpdateParamaters">UpdateParamaters</see> used to update the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.UpdateParamaters)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.UpdateParamaters)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Draw">
            <summary>
            Draws the sprite.
            Automatically begins the SpriteBatch before you draw the sprite and ends the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.DrawNonAuto">
            <summary>
            Draws the sprite.
            Requires you to begin the SpriteBatch before you draw the sprite, and to end the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.CallDrawn">
            <summary>
            Call the drawn event after drawing of the Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.ClickCheck(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Checks whether the user is clicking on the sprite.
            </summary>
            <param name="ms">The current MouseState.</param>
            <returns>Whether or not the mouse, based on the given MouseState, is clicking on this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.ClickCheck">
            <summary>
            Checks whether the user is clicking on the sprite, using the MouseState of InputLib.Mouse.MouseManager.
            </summary>
            <returns>Whether or not the mouse is clicking on this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks whether the given point intersects with the sprite.
            </summary>
            <param name="pos">The position to check.</param>
            <returns>Whether or not the specified position intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Checks whether the specified MouseState's pointer intersects with this sprite.
            </summary>
            <param name="ms">The MouseState to check intersection against.</param>
            <returns>Whether or not the specified mouse position intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks whether the given rectangle intersects with this sprite.
            </summary>
            <param name="r">The rectangle to check intersection against</param>
            <returns>Whether or not the specified rectangle intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Checks whether the given sprite intersects with this sprite.
            </summary>
            <param name="s">The sprite to check intersection against.</param>
            <returns>Whether or not the rectangle of the specified Sprite intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.EdgesPast">
            <summary>
            Determines the edges which this sprite has points past, if any.
            </summary>
            <returns>An array of directions representing the edges this sprite is past. Empty if none.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.UsedViewport">
            <summary>
            If not null, the viewport to use in viewport-requiring operation.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.RemoveFromManager">
            <summary>
            Remove this Sprite from it's associated SpriteManager.
            </summary>
            <exception cref="T:System.NullReferenceException">If there is no associated SpriteManager (the SpriteManager property is null).</exception>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.FollowMouse(Glib.XNA.SpriteLib.SpriteRotation,System.Single)">
            <summary>
            Follow the mouse pointer.
            </summary>
            <remarks>
            Uses the InputLib.Mouse.MouseManager.CurrentMouseState.
            </remarks>
            <param name="initialRotation">The offset rotation to use in adjusting the Sprite's rotation towards the mouse.</param>
            <param name="speed">The speed of following.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.FollowMouse(System.Single)">
            <summary>
            Follow the mouse pointer.
            </summary>
            <param name="speed">The speed of following.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Update">
            <summary>
            Logically update this sprite. This can also be done in the Updated event.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Visible">
            <summary>
            Gets or sets a boolean indicating whether the Sprite is visible.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Effect">
            <summary>
            The effect to apply to the Sprite when drawn.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.XSpeed">
            <summary>
            The speed of the sprite along the X axis.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.OnlyDrawRegion">
            <summary>
            A boolean representing whether or not to only draw a selected region of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.DrawRegion">
            <summary>
            Gets or sets the selected region of the Sprite to draw. Set to null to draw the entire Sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Moved">
            <summary>
            An EventHandler called after the successful movement of this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.YSpeed">
            <summary>
            The speed of the sprite along the Y axis.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Updated">
            <summary>
            An event called after every update of this sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Drawn">
            <summary>
            An event called after every draw of this sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Move">
            <summary>
            A cancellable event called before every change of this sprite's position.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Center">
            <summary>
            Gets the scale-sensitive center of the sprite.
            Setting this property will break with OriginType as Center or Custom.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.X">
            <summary>
            The current X coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Y">
            <summary>
            The current Y coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Width">
            <summary>
            A scale-sensitive width. Use Texture.Width to not account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Height">
            <summary>
            A scale-sensitive height. Use Texture.Height to not account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Texture">
            <summary>
            The texture of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Position">
            <summary>
            The current position of the sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.MouseEnter">
            <summary>
            An event called when the mouse enters the area of the Sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.MouseLeave">
            <summary>
            An event called when the mouse leaves the area of the Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Rectangle">
            <summary>
            Gets an approximate Rectangle representing the area covered by this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.OriginType">
            <summary>
            Gets or sets an enum representing the type of the origin of this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Origin">
            <summary>
            Gets or sets the origin of the Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.UseCenterAsOrigin">
            <summary>
            Gets or sets whether or not to use the center of the Sprite as the origin.
            </summary>
            <remarks>
            When Origin is set, it will only affect this value if set precisely to the center of the Sprite (no scale accounting).
            If this is set to false, the Origin will not be changed.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ProgressBar.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new ProgressBar.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ProgressBar.FillColor">
            <summary>
            The color to show for portions of the progress bar that are full.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ProgressBar.EmptyColor">
            <summary>
            The color to show for portions of the progress bar that are empty.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Denominator">
            <summary>
            Gets or sets the highest possible value (denominator) of the progress bar.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.HeightScale">
            <summary>
            Gets or sets the scaling of height to perform to this object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.WidthScale">
            <summary>
            Gets or sets the scaling of width to perform to this object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Percentage">
            <summary>
            Gets the percentage (not fraction) of the progress bar that is complete.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Value">
            <summary>
            Gets or sets the numerator (value) of the progress bar.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.ProgressBar.ProgressBarFilled">
            <summary>
            An event fired when the progress bar is filled (value is set to denominator).
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Texture">
            <summary>
            Gets or sets a representation of the texture to use for the progress bar.
            </summary>
            <remarks>
            Setting this texture will result in (slow) image processing to create data.
            It does not assume the same color scheme, but it does assume the same scale.
            If the bar is one color, the program will parse it as 0% unless the color is the FillColor of this ProgressBar.
            If the color scheme is inverted in the texture you are setting this ProgressBar to, you should be aware of this.
            </remarks>
        </member>
        <member name="T:Glib.Exceptions.SecurityRiskType">
            <summary>
            An enum representing a type of security risk that caused a <see cref="T:Glib.Exceptions.SecurityException"/>.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityRiskType.XSS">
            <summary>
            Represesnts a detected XSS attempt.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityRiskType.SQLInject">
            <summary>
            Represents a detected SQL injection attempt.
            </summary>
        </member>
        <member name="T:Glib.Exceptions.SecurityException">
            <summary>
            An exception representing a possible security risk.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityException.RiskType">
            <summary>
            The type of risk represented by the exception. Null means no specific risk type.
            </summary>
        </member>
        <member name="M:Glib.Exceptions.SecurityException.#ctor">
            <summary>
            Create a new security exception with no specific risk type.
            </summary>
        </member>
        <member name="M:Glib.Exceptions.SecurityException.#ctor(Glib.Exceptions.SecurityRiskType)">
            <summary>
            Create a new security exception with the specified risk type.
            </summary>
            <param name="risk">The type of security risk.</param>
        </member>
        <member name="P:Glib.Exceptions.SecurityException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpritePositionMapping">
            <summary>
            A simple class for storing a mapping of ISprites to positions on the screen.
            It is strongly suggested that the implementation of ISprite has a Location/Position property instead of using this class.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpritePositionMapping.FindPosition(Glib.XNA.ISprite)">
            <summary>
            Finds the position of a certain sprite.
            </summary>
            <param name="spr">The sprite to find the position of.</param>
            <returns>The position of the sprite, or a blank Vector2 if not found</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpritePositionMapping.Remove(Glib.XNA.ISprite)">
            <summary>
            Remove the position of the specified ISprite from this SpritePositionMapping.
            </summary>
            <param name="spr">The sprite to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpritePositionMapping.MoveSprite(Glib.XNA.ISprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Move the given sprite to a new position.
            </summary>
            <param name="spr">The sprite to move.</param>
            <param name="newpos">The new position of the sprite.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpritePositionMapping.Item(Glib.XNA.ISprite)">
            <summary>
            Get and set the position of the specified ISprite.
            </summary>
            <param name="sprite">The ISprite you want to change the position of.</param>
            <returns>The position of the given ISprite.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpritePositionMapping.Length">
            <summary>
            The number of items in this SpritePositionMapping.
            </summary>
            <remarks>
            The same thing as Count.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.BackgroundSprite">
            <summary>
            Represents a background Sprite which tiles a background.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>
            Create a new BackgroundSprite.
            </summary>
            <param name="texture">The sprite texture.</param>
            <param name="sb">The SpriteBatch.</param>
            <param name="height">The height of the background matrix.</param>
            <param name="width">The width of the background matrix.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.DrawNonAuto">
            <summary>
            Draw this background sprite w/o opening/closing the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.CenterViewport">
            <summary>
            Sets the viewport to the middle of the BackgroundSprite Texture.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.HorizontalCount">
            <summary>
            Gets the count of background image tiles horizontally.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.VerticalCount">
            <summary>
            Gets the count of background image tiles vertiacally.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.TotalWidth">
            <summary>
            Gets the total width of the background.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.TotalHeight">
            <summary>
            Gets the total height of the background.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.ShowStitches">
            <summary>
            Gets or sets a boolean indicating whether or not to show stitches.
            </summary>
        </member>
        <member name="T:Glib.XNA.KeyEventHandler">
            <summary>
            Handle when a keyboard event happens.
            </summary>
            <param name="source">The SpriteManager that is intercepting the key event.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.KeyEventArgs">KeyEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SingleKeyEventHandler">
            <summary>
            Handle when a keyboard event happens for a single key.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SingleKeyEventArgs">SingleKeyEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SpriteMoveEventArgs">
            <summary>
            Event arguments for a sprite movement.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteMoveEventArgs.OldPosition">
            <summary>
            The old position of the sprite
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteMoveEventArgs.NewPosition">
            <summary>
            The position the sprite is going to be moved to.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteMoveEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new SpriteMoveEventArgs, specifying an old position and a new position.
            </summary>
            <param name="OldPos">The old position.</param>
            <param name="NewPos">The new position.</param>
        </member>
        <member name="T:Glib.XNA.SpriteClickEventArgs">
            <summary>
            Event arguments for a sprite click.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.X">
            <summary>
            The X coordinate of the click on the screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.CalledByManager">
            <summary>
            Whether or not this event is being called by a SpriteManager.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.Y">
            <summary>
            The Y coordinate of the click on the screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.Sprite">
            <summary>
            The sprite that was clicked on.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteClickEventArgs.#ctor(Glib.XNA.SpriteLib.Sprite,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new SpriteClickEventArgs, specifying a position and sprite.
            </summary>
            <param name="x">The X position of the click.</param>
            <param name="y">The Y position of the click.</param>
            <param name="spr">The sprite that was clicked on.</param>
            <param name="manager">Whether or not this event is being called by a SpriteManager.</param>
        </member>
        <member name="T:Glib.XNA.KeyEventArgs">
            <summary>
            Event arguments for a key event.
            </summary>
        </member>
        <member name="F:Glib.XNA.KeyEventArgs.PressedKeys">
            <summary>
            All the pressed keys in this event.
            </summary>
        </member>
        <member name="M:Glib.XNA.KeyEventArgs.KeyIsPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Whether or not the given key is pressed in this event.
            </summary>
            <param name="k">The key to check if it is being pressed.</param>
            <returns>A boolean representing whether or not the given key is pressed.</returns>
        </member>
        <member name="M:Glib.XNA.KeyEventArgs.#ctor(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Construct a new KeyEventArgs.
            </summary>
            <param name="pressedKeys">The keys pressed for this event.</param>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Alt">
            <summary>
            A boolean representing whether or not the Alt modifier key is pressed.
            </summary>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Control">
            <summary>
            A boolean representing whether or not the Control modifier key is pressed.
            </summary>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Shift">
            <summary>
            A boolean representing whether or not the Shift modifier key is pressed.
            </summary>
        </member>
        <member name="T:Glib.XNA.SingleKeyEventArgs">
            <summary>
            Event arguments for a single key event.
            </summary>
        </member>
        <member name="M:Glib.XNA.SingleKeyEventArgs.#ctor(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Construct a new SingleKeyEventArgs.
            </summary>
            <param name="pressedKey">The key associated with this event.</param>
        </member>
        <member name="P:Glib.XNA.SingleKeyEventArgs.Key">
            <summary>
            Gets the key associated with this event.
            </summary>
        </member>
        <member name="T:Glib.Networking.Email">
            <summary>
            An email message that can be sent.
            </summary>
        </member>
        <member name="F:Glib.Networking.Email.Message">
            <summary>
            The mail message to be sent.
            </summary>
        </member>
        <member name="F:Glib.Networking.Email.Sending">
            <summary>
            The SmtpClient used in sending the message.
            </summary>
        </member>
        <member name="M:Glib.Networking.Email.Send">
            <summary>
            Send the mail message.
            </summary>
        </member>
        <member name="M:Glib.Networking.Email.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.SmtpClient)">
            <summary>
            Create a new email message.
            </summary>
            <param name="from">The email address to send from.</param>
            <param name="send">The client to use to send the message.</param>
        </member>
        <member name="M:Glib.Networking.Email.SendAsync">
            <summary>
            Send the mail message asynchronously.
            </summary>
        </member>
        <member name="E:Glib.Networking.Email.AsyncSendCompleted">
            <summary>
            Occurs when an async send is completed.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Subject">
            <summary>
            Gets or sets the subject of the email.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Body">
            <summary>
            Gets or sets the body of the email.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.IsHtml">
            <summary>
            Gets or sets a boolean representing whether or not the message body is HTML.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Attachments">
            <summary>
            Gets the attachments to be sent along with this mail message.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Recipients">
            <summary>
            Gets the collection of recipient mail addresses.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Sender">
            <summary>
            Gets or sets the mail message sender.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.From">
            <summary>
            Gets or sets the mail message from address.
            </summary>
        </member>
        <member name="T:Glib.Networking.IpPing">
            <summary>
            A class for pinging IPs.
            </summary>
        </member>
        <member name="M:Glib.Networking.IpPing.#ctor">
            <summary>
            Create a new IpPing.
            </summary>
        </member>
        <member name="M:Glib.Networking.IpPing.#ctor(System.Int32)">
            <summary>
            Create a new IpPing with the specified timeout.
            </summary>
            <param name="timeout">The timeout of the ping in milliseconds.</param>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String,System.Int32)">
            <summary>
            Ping the first IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <param name="timeout">The timeout.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String,System.Int32,System.Int32)">
            <summary>
            Ping the specified IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <param name="timeout">The timeout.</param>
            <param name="whichDomainIp">The zero-based index of an IPAddress in System.Net.Dns.GetHostAddresses(domainName).</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String)">
            <summary>
            Ping the first IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.String)">
            <summary>
            Ping the specified IP address.
            </summary>
            <param name="ip">The IP to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.Net.IPAddress)">
            <summary>
            Ping the specified IP.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.String,System.Int32)">
            <summary>
            Ping the specified IP with the specified timeout.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <param name="timeout">The timeout, in milliseconds, of the ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.Net.IPAddress,System.Int32)">
            <summary>
            Ping the specified IP with the specified timeout.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <param name="timeout">The timeout, in milliseconds, of the ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="P:Glib.Networking.IpPing.TimeOut">
            <summary>
            Get or set the ping timeout in milliseconds.
            </summary>
        </member>
        <member name="T:Glib.AlphabetPrinter">
            <summary>
            A class for printing alphabetical letters to a string and the console.
            </summary>
        </member>
        <member name="M:Glib.AlphabetPrinter.#ctor(System.Char)">
            <summary>
            Create a new AlphabetPrinter creating letters made out of the specified character.
            </summary>
            <param name="printChar">The character to make letters out of.</param>
        </member>
        <member name="M:Glib.AlphabetPrinter.GetAlphabetString(System.String)">
            <summary>
            Get the large alphabet string for the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The word as a multiline alphabet string.</returns>
        </member>
        <member name="M:Glib.AlphabetPrinter.Print(System.String)">
            <summary>
            Print the specified word to console.
            </summary>
            <param name="word">The word to print.</param>
        </member>
        <member name="P:Glib.AlphabetPrinter.LetterChar">
            <summary>
            The character to make letters out of.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.A">
            <summary>
            The character A.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.B">
            <summary>
            The character B.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.C">
            <summary>
            The character C.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.D">
            <summary>
            The character D.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.E">
            <summary>
            The character E.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.F">
            <summary>
            The character F.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.G">
            
            <summary>
            The character G.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.H">
            <summary>
            The character H.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.I">
            <summary>
            The character I.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.J">
            <summary>
            The character J.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.K">
            <summary>
            The character K.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.L">
            <summary>
            The character L.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.M">
            <summary>
            The character M.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.N">
            <summary>
            The character N.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.O">
            <summary>
            The character O.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.P">
            <summary>
            The character P.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Q">
            <summary>
            The character Q.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.R">
            <summary>
            The character R.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.S">
            <summary>
            The character S.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.T">
            <summary>
            The character T.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.U">
            <summary>
            The character U.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.V">
            <summary>
            The character V.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Space">
            <summary>
            A space character.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.ExclamationMark">
            <summary>
            An exclamation mark.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Pound">
            <summary>
            The pound sign.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Hyphen">
            <summary>
            A hyphen character.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.LeftParentheses">
            <summary>
            The character representing left parentheses.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.RightParentheses">
            <summary>
            The character representing right parentheses.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.One">
            <summary>
            The number one.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Two">
            <summary>
            The number two.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Three">
            <summary>
            The number three.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.CustomChars">
            <summary>
            Gets a list of custom characters specific to this instance, in the format of key: input letter, value: bool[,] representing the letter.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Four">
            <summary>
            The number four.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Five">
            <summary>
            The number five.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Six">
            <summary>
            The number six.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Seven">
            <summary>
            The number seven.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Eight">
            <summary>
            The number eight.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Nine">
            <summary>
            The number nine.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Zero">
            <summary>
            The number zero.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Updater">
            <summary>
            A base class for generic update logic using a SpriteWrapper.
            Extend this class to implement sprite updating logic if you are using a SpriteWrapper.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Updater.#ctor(Glib.XNA.SpriteLib.SpriteWrapper)">
            <summary>
            Construct a new Updater associated with this SpriteWrapper.
            </summary>
            <param name="sw">The SpriteWrapper to associate this Updater with.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Updater.RemoveSprite(Glib.XNA.ISprite)">
            <summary>
            Remove an ISprite from the parent SpriteWrapper.
            </summary>
            <param name="remove">The ISprite to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Updater.AddSprite(Glib.XNA.ISprite)">
            <summary>
            Add an ISprite to the parent SpriteWrapper.
            </summary>
            <param name="sprite">The ISprite to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Updater.GetAllSprites">
            <summary>
            Get all ISprites in the parent SpriteWrapper.
            </summary>
            <returns>An enumerable of all the ISprites managed by the parent SpriteWrapper.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Updater.UpdateSprite(Glib.XNA.ISprite)">
            <summary>
            Update this ISprite.
            </summary>
            <param name="updating">The ISprite to update.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteOriginType">
            <summary>
            An enum indicating the origin type of a Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Zero">
            <summary>
            The origin is located at 0,0 relative to the Sprite. This is the default.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Center">
            <summary>
            The origin is located at the center of the Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Custom">
            <summary>
            The origin is a user-specified value.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.ScreenRegion">
            <summary>
            Represents a region on screen which can call mouse events.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.op_Explicit(Glib.XNA.InputLib.ScreenRegion)~Microsoft.Xna.Framework.Rectangle">
            <summary>
            Convert the specified ScreenRegion to a rectangle.
            </summary>
            <param name="a">The ScreenRegion to convert.</param>
            <returns>The rectangle representing the ScreenRegion.</returns>
            <remarks>
            The rectange is rounded, since the ScreenRegion supports floating point numbers.
            </remarks>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Create a new ScreenRegion with the specified bounds and position.
            </summary>
            <param name="bounds">The bounds and position of the ScreenRegion.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new ScreenRegion with the specified size and position.
            </summary>
            <param name="pos">The position of the ScreenRegion.</param>
            <param name="size">The size of the ScreenRegion.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.Update">
            <summary>
            Update this ScreenRegion, calling mouse events.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Size">
            <summary>
            Gets or sets the size of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Position">
            <summary>
            Gets or sets the position of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Width">
            <summary>
            Gets or sets the width of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Height">
            <summary>
            Gets or sets the height of the ScreenRegion.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ScreenRegion.MouseEnter">
            <summary>
            An event called when a mouse enters this ScreenRegion.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ScreenRegion.MouseLeave">
            <summary>
            An event called when a mouse leaves this ScreenRegion.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ScreenRegion.LeftMouseClick">
            <summary>
            An event called when there is a left mouse click in this region.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ScreenRegion.RightMouseClick">
            <summary>
            An event called when there is a right mouse click (AKA a right click) in this region.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.MouseManager">
            <summary>
            Represents a manager of mouse events and data.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.MouseManager.Update">
            <summary>
            Update the MouseManager.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.MouseManager.CurrentMouseState">
            <summary>
            Gets the current mouse state.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.MouseManager.LastMouseState">
            <summary>
            Gets the last known mouse state before the current mouse state.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.MouseManager.Updated">
            <summary>
            An event fired after the update of the MouseManager, but before the assignment of LastMouseState.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.MouseManager.AllRegions">
            <summary>
            Gets a list of all known updated SreenRegion objects.
            </summary>
        </member>
        <member name="T:Glib.XNA.GameTimer">
            <summary>
            A timer firing events at set intervals during the game.
            </summary>
        </member>
        <member name="M:Glib.XNA.GameTimer.#ctor(Microsoft.Xna.Framework.Game,System.TimeSpan)">
            <summary>
            Create a new GameTimer with the specified interval.
            </summary>
            <param name="associatedGame">The Game to attach this GameTimer to.</param>
            <param name="timePassing">The interval between calls to Elapsed.</param>
        </member>
        <member name="M:Glib.XNA.GameTimer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the GameTimer, calling the Elapsed event if neccesary.
            </summary>
            <param name="gt">The current GameTime.</param>
        </member>
        <member name="M:Glib.XNA.GameTimer.#ctor(Microsoft.Xna.Framework.Game,System.Int32)">
            <summary>
            Create a new GameTimer with the specified interval.
            </summary>
            <param name="associatedGame">The Game to attach this GameTimer to.</param>
            <param name="msTimePassing">The interval (in milliseconds) between calls to Elapsed.</param>
        </member>
        <member name="P:Glib.XNA.GameTimer.Time">
            <summary>
            Gets or sets the interval of time to fire events from.
            </summary>
        </member>
        <member name="E:Glib.XNA.GameTimer.Elapsed">
            <summary>
            An event called after every elapse of the time specified by this GameTimer.
            </summary>
        </member>
        <member name="P:Glib.XNA.GameTimer.IsRepeating">
            <summary>
            Gets or sets a boolean indeicating whether or not this timer is repeating.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Velocity">
            <summary>
            Represents the velocity of a sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Velocity.XVelocity">
            <summary>
            The velocity on the X axis (null means no change).
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Velocity.YVelocity">
            <summary>
            The velocity on the Y axis (null means no change).
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Velocity.#ctor">
            <summary>
            Construct a new velocity representing no change.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Velocity.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new velocity representing the passed in values of XSpeed and YSpeed.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.TextBoxSprite">
            <summary>
            A Sprite which accepts Text as input.
            </summary>
            <remarks>
            Please do not forget to set the Width of this Sprite.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.KeyPressDelay">
            <summary>
            The delay between allowed key presses.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.ResetOnSubmit">
            <summary>
            Whether or not to reset the Text of this TextBoxSprite when the text is submitted.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite using a white background.
            </summary>
            <param name="pos">The position of the TextBoxSprite.</param>
            <param name="font">The SpriteFont to draw the text with.</param>
            <param name="sb">The SpriteBatch to draw to.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.UpdateParamaters,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
            <param name="texture">The texture to show beneath the text (must be scalable).</param>
            <param name="color">The color to tint the texture under the text.</param>
            <param name="pos">The position of the TextBoxSprite.</param>
            <param name="font">The SpriteFont to draw the text with.</param>
            <param name="sb">The SpriteBatch to draw to.</param>
            <param name="up">The UpdateParameters to use when updating this Sprite.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.UpdateParamaters,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.DrawNonAuto">
            <summary>
            Draws the sprite.
            Requires you to begin the SpriteBatch before you draw the sprite, and to end the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.IgnoredKeys">
            <summary>
            A read-only collection of all keys ignored for input.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.Update">
            <summary>
            Update this TextBoxSprite.
            This includes processing keypresses and calling events.
            </summary>
            <remarks>
            Doesn't tick elaspedKeyPressTime.
            Called internally by Update(GameTime) after incrementing elaspedKeyPressTime.
            Requires an InputManagerComponent in your game.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update this TextBoxSprite, ticking the keypress delay.
            </summary>
            <param name="gt">The current GameTime, passed to the Game.</param>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextBoxSprite.Moved">
            <summary>
            An EventHandler called after the successful movement of this TextBoxSprite.
            </summary>
            <remarks>
            The superclass implementation is hidden to prevent removal of internally used event handlers.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.TextColor">
            <summary>
            The color of the text.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.Text">
            <summary>
            The displayed text of the underlying TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.RealText">
            <summary>
            The full text typed into this TextBoxSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.IsPassword">
            <summary>
            Whether or not this is a password text field.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.Focused">
            <summary>
            Whether or not this TextBoxSprite is focused.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextBoxSprite.TextSubmitted">
            <summary>
            An event fired when text is submitted from this TextBoxSprite.
            </summary>
            <remarks>
            The text is not cleared until after the event is called, so you can use the Text property of the source to get the text submitted.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.UseCenterAsOrigin">
            <summary>
            Use the center as the origin.
            Always false for this Sprite implementation.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.PasswordCharacter">
            <summary>
            The character to display for passwords.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteWrapper">
            <summary>
            A class for managing multiple instances of any implementation of ISprite using the same SpriteBatch easily.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.Add(Glib.XNA.ISprite)">
            <summary>
            Add a new ISprite to this SpriteManager.
            </summary>
            <param name="spr">The ISprite to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.ISprite[])">
            <summary>
            Create a new SpriteWrapper.
            </summary>
            <param name="spritestart">The Collection of ISprites to initialize Sprites with.</param>
            <param name="sb">The SpriteBatch to use.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.#ctor(System.Collections.Generic.ICollection{Glib.XNA.ISprite},Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.Updater)">
            <summary>
            Create a new SpriteWrapper.
            </summary>
            <param name="spritestart">The Collection of ISprites to initialize Sprites with.</param>
            <param name="sb">The SpriteBatch to use.</param>
            <param name="updates">The Updater to use for updating ISprite objects (in addition to the Update() method).</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.Remove(Glib.XNA.ISprite)">
            <summary>
            Remove an ISprite from this SpriteWrapper.
            </summary>
            <param name="spr">The ISprite to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.Update">
            <summary>
            Update all ISprites managed by this SpriteWrapper, in addition to using the Updater associated with this SpriteWrapper if applicable.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all ISprites managed by this SpriteWrapper, in addition to using the Updater associated with this SpriteWrapper if applicable.
            This overload will also call the Update(GameTime) overload of ITimerSprite objects.
            </summary>
            <param name="gt">The GameTime object to use in updating ITimerSprites.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.Draw">
            <summary>
            Draws all sprites, and handles the SpriteBatch opening and closing.
            This assumes the implementation of ISprite in use will not handle the SpriteBatch beginning/ending by itself.
            If the type also implements ISpriteBatchManagerSprite, the DrawNonAuto() method will be called on the object instead of Draw().
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteWrapper.DrawNonAuto">
            <summary>
            Draw all sprites without handling the SpriteBatch for you.
            If the type in use implements ISpriteBatchManagerSprite, the DrawNonAuto() method will be called on the object instead of Draw().
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteWrapper.Updater">
            <summary>
            The updater to use when updating ISprites in this SpriteWrapper.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteWrapper.Sprites">
            <summary>
            A collection of all ISprites managed by this SpriteWrapper.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteWrapper.Item(System.Int32)">
            <summary>
            Get or set the ISprite with the specified index in the Sprites collection.
            </summary>
            <param name="index">The index in the Sprites collection.</param>
            <returns>The ISprite with the specified index in the Sprites collection.</returns>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteManager">
            <summary>
            Manages multiple <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> objects on the same SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.AddNewSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Add a new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified position and texture.
            </summary>
            <param name="position">The position of the new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</param>
            <param name="texture">The texture of the new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.RemoveSelf(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Remove a <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> from this SpriteManager.
            Safe to call during Update() or Draw() (or from their corresponding events).
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Add(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Add a <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to this SpriteManager.
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Remove(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Remove a given <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>, that is NOT the <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> being updated.
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.Sprite[])">
            <summary>
            Construct a new SpriteManager.
            </summary>
            <param name="sb">The SpriteBatch to use.</param>
            <param name="sprites">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s to add to the SpriteManager.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Draw">
            <summary>
            Draw all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this SpriteManager.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.DrawNonAuto">
            <summary>
            Draw all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this SpriteManager, without opening or closing the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Update">
            <summary>
            Update all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <remarks>
            Does not call Update(GameTime) on subclasses of Sprite implementing ITimerSprite.
            The MouseState for click checking is InputLib.Mouse.MouseManager.CurrentMouseState.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>, calling Update(GameTime) on ITimerSprites where neccesary.
            </summary>
            <remarks>
            Uses InputLib.Mouse.MouseManager.CurrentMouseState.
            </remarks>
            <param name="gameTime">The current game time.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Clear">
            <summary>
            Removes all Sprites from this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Contains(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Determines whether the specified <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> is in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <param name="item">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to locate in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</param>
            <returns>Whether or not this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> contains the specified <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.CopyTo(Glib.XNA.SpriteLib.Sprite[],System.Int32)">
            <summary>
            Copies the entire <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> into the specified array, beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional array of <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s to copy into.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <returns>An enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <returns>An enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.Sprites">
            <summary>
            Gets the list of <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this SpriteManager.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.SpriteBatch">
            <summary>
            Gets the <seealso cref="P:Glib.XNA.SpriteLib.SpriteManager.SpriteBatch"/> drawn to.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.Item(System.Int32)">
            <summary>
            Get or set the <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified index in the Sprites list.
            </summary>
            <remarks>
            Returns null if the index is out of bounds of the array, instead of throwing an exception.
            </remarks>
            <param name="index">The index in the Sprites list.</param>
            <returns>The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified index in the Sprites list.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.Count">
            <summary>
            Gets the number of <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.IsReadOnly">
            <summary>
            Gets a value indicating whether or not this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> is read-only.
            </summary>
            <remarks>
            For a <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>, this value is always false.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Direction">
            <summary>
            An enum representing a direction.
            Can also represent the edge of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Top">
            <summary>
            An edge representing the top of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Bottom">
            <summary>
            An edge representing the bottom of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Left">
            <summary>
            An edge representing the left side of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Right">
            <summary>
            An edge representing the right side of a viewport.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Screen">
            <summary>
            Represents a RenderTarget2D which is a screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Sprites">
            <summary>
            All the Sprites to draw to this Screen.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.CenterToViewport(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Center the position of this Screen relative to the position of the specified Viewport.
            </summary>
            <param name="v">The viewport to center to.</param>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.AdditionalSprites">
            <summary>
            Any non-Sprite deriving Sprites that need to be drawn to this Screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.ClearColor">
            <summary>
            The color to clear this screen as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.TintColor">
            <summary>
            The color to tint this screen as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Target">
            <summary>
            The target to render things to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Graphics">
            <summary>
            The graphics device to draw to.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.SpriteManager)">
            <summary>
            Create a new screen.
            </summary>
            <param name="target">The render target to draw to.</param>
            <param name="color">The color to clear this Screen as before drawing.</param>
            <param name="allSprites">The SpriteManager containing the Sprites to draw.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.SpriteManager)">
            <summary>
            Create a new screen.
            </summary>
            <param name="sizeOfTarget">The size and position of the RenderTarget.</param>
            <param name="color">The color to clear this Screen as before drawing.</param>
            <param name="allSprites">The SpriteManager containing the Sprites to draw.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a new Screen with no Sprites by default.
            </summary>
            <param name="sb">The SpriteBatch to draw.</param>
            <param name="c">The color of the Screen.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create a new Screen with a background image.
            </summary>
            <param name="sb">The SpriteBatch to draw.</param>
            <param name="c">The color of the Screen.</param>
            <param name="back">The background image of the Screen.</param>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.BackgroundSprite">
            <summary>
            If set, the ISprite to use as the background.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Glib.XNA.SpriteLib.SpriteManager,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a new screen.
            </summary>
            <param name="color">The color to clear the Screen as before Sprite drawing.</param>
            <param name="mgr">The SpriteManager managing a SpriteBatch with a viewport to use as the Screen size.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.Update">
            <summary>
            Update all Sprites on this Screen.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.MiscellaneousProcessing">
            <summary>
            If overriden in a subclass, performs miscellaneous processing logic while the RenderTarget2D is the active RenderTarget.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.OpenSpriteBatch(Microsoft.Xna.Framework.Graphics.SpriteBatch@)">
            <summary>
            Open the specified SpriteBatch with the settings required for drawing this Screen.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all Sprites on this Screen.
            </summary>
            <param name="game">The active game time.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Visible">
            <summary>
            Gets or sets a boolean representing whether or not this Screen is visible.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.SpriteCount">
            <summary>
            Gets the total count of ISprites in this Screen.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.CenterOrigin">
            <summary>
            Gets or sets a value indicating whether or not to use the center of the Screen as the origin when drawing.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Width">
            <summary>
            Gets the width of this Screen, in pixels.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Height">
            <summary>
            Gets the height of this Screen, in pixels.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Name">
            <summary>
            Gets or sets the name of the Screen.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Position">
            <summary>
            Gets or sets the position of the Screen relative to the display.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ScreenManager">
            <summary>
            Represents a set of Screens to manage.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager._allScreens">
            <summary>
            All the Screen objects managed by this ScreenManager.
            </summary>
            <remarks>
            The component that is called by all implemented IEnumerable and ICollection methods.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.Graphics">
            <summary>
            The graphics device to draw to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.SpriteBatch">
            <summary>
            The SpriteBatch to draw to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.Background">
            <summary>
            The main background color.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.Screen[])">
            <summary>
            Create a ScreenManager.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(System.Boolean)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="updateInvisible">Whether or not to update invisible screens.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="gt">The active GameTime.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(System.Boolean,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="updateInvisible">Whether or not to update invisible screens.</param>
            <param name="gt">The active GameTime.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update">
            <summary>
            Update all the Screen's sprites.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.BeginDraw">
            <summary>
            Prepares to draw all the Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Draw">
            <summary>
            Draws all the visible screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.EndDraw">
            <summary>
            Ends drawing of all Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Add(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Add the specified Screen to this ScreenManager.
            </summary>
            <param name="item">The screen to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Clear">
            <summary>
            Clear this ScreenManager of all Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Contains(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Check if this ScreenManager contains the specified Screen.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Whether or not this ScreenManager contains item.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.CopyTo(Glib.XNA.SpriteLib.Screen[],System.Int32)">
            <summary>
            Copies the entire collection of Screens to the specified array starting at the specified index.
            </summary>
            <param name="array">The array to copy items to.</param>
            <param name="arrayIndex">The index to begin putting items.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Remove(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Remove the specified Screen from this ScreenManager.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Whether or not the item was removed.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ScreenManager.
            </summary>
            <returns>An enumerator that iterates through the ScreenManager.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Item(System.Int32)">
            <summary>
            Gets the Screen at the specified index.
            </summary>
            <param name="index">The index in the AllScreens list.</param>
            <returns>The screen with the specified index.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Item(System.String)">
            <summary>
            Gets the Screen with the specified name.
            </summary>
            <param name="name">The name of the screen.</param>
            <exception cref="T:System.InvalidOperationException">If multiple Screens with the specified name exist.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If no Screens with the specified name exist.</exception>
            <returns>The screen with the specified name.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Count">
            <summary>
            Gets the number of Screens this ScreenManager is managing.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.IsReadOnly">
            <summary>
            Gets a value representing whether or not this collection is read only.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.RequiredSqlParameterTextBox">
            <summary>
            A required text box representing a SQL parameter.
            </summary>
        </member>
        <member name="T:Glib.WinForms.IRequiredField">
            <summary>
            An interface representing a required winforms field.
            </summary>
        </member>
        <member name="P:Glib.WinForms.IRequiredField.Completed">
            <summary>
            Whether or not the entry is completed properly.
            </summary>
        </member>
        <member name="P:Glib.WinForms.IRequiredField.InvalidityError">
            <summary>
            Gets a string indicating the error to display if the field is invalid.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredSqlParameterTextBox.#ctor(System.String)">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name and default validation code.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
        </member>
        <member name="F:Glib.WinForms.Controls.RequiredSqlParameterTextBox.FieldValidation">
            <summary>
            The predicate checking whether or not this field is complete.
            True means complete, false means incomplete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredSqlParameterTextBox.#ctor(System.String,System.Predicate{System.String})">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name and validation code.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
            <param name="validator">The predicate to use to check if the field is complete.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredSqlParameterTextBox.Completed">
            <summary>
            Whether or not the entry is completed properly.
            Is determined by the return value of FieldValidation.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredSqlParameterTextBox.InvalidityError">
            <summary>
            Gets or sets a string indicating the error message to display if the field is invalid.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.RequiredTextBox">
            <summary>
            A required text box.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.IsValid(System.String)">
            <summary>
            The default field validation code.
            </summary>
            <remarks>
            Checks if the field text is empty, and returns that value inverted.
            </remarks>
            <param name="str">The text of the field.</param>
            <returns>Whether or not the field is valid.</returns>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.#ctor">
            <summary>
            Create a new RequiredTextBox with default validation code.
            </summary>
        </member>
        <member name="F:Glib.WinForms.Controls.RequiredTextBox.FieldValidation">
            <summary>
            The predicate checking whether or not this field is complete.
            True means complete, false means incomplete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.#ctor(System.Predicate{System.String})">
            <summary>
            Create a new RequiredTextBox with the specified parameter name and validation code.
            </summary>
            <param name="validator">The predicate to use to check if the field is complete.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredTextBox.Completed">
            <summary>
            Whether or not the entry is completed properly.
            Is determined by the return value of FieldValidation.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredTextBox.InvalidityError">
            <summary>
            Gets or sets a string indicating the error message to display if the field is invalid.
            </summary>
        </member>
        <member name="T:Glib.Cryptography.CryptoExtensions">
            <summary>
            A class providing cryptographic extensions on strings.
            </summary>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.MD5Hash(System.String)">
            <summary>
            Compute the hexadecimal MD5 hash of the specified string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns>The MD5 hash of the input string.</returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA256Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA256 hash of the specified string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA1Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA1 hash of the specified string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns>The SHA1 hash of the input string.</returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA512Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA512 hash of the specified string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns>The hexadecimal SHA512 hash of the specified string.</returns>
        </member>
        <member name="T:Glib.WinForms.Shapes.Circle">
            <summary>
            A circle shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new circle with the specified position, diameter, and color.
            </summary>
            <param name="x">The X position of the circle.</param>
            <param name="y">The Y position of the circle.</param>
            <param name="diameter">The diameter of the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.#ctor(System.Drawing.Point,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new circle with the specified position, diameter, and color.
            </summary>
            <param name="pos">The position of the circle.</param>
            <param name="diameter">The diameter of the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the circle to the specified graphics object..
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.Draw(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draw this circle to the specified graphics object with the default color.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Circle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Circle.Radius">
            <summary>
            The radius of the circle.
            </summary>
            <remarks>
            Is approximate in getting since it converts directly to the diameter by integer division.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.PositionRepresentation">
            <summary>
            A basic class that represents a position. Intented to be used when an IPositionable is needed but you only have a Vector2.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.PositionRepresentation.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new PositionRepresentation.
            </summary>
            <param name="pos">The position to represent.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.X">
            <summary>
            Gets or sets the X position of the Position object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.Y">
            <summary>
            Gets or sets the Y position of the Position object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.Position">
            <summary>
            Gets or sets the underlying position.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.KeyboardManager">
            <summary>
            A static class calling keyboard related events when updated.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.KeyboardManager._lastState">
            <summary>
            The last known state of the keyboard.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.KeyboardManager.Update">
            <summary>
            Update the KeyboardManager, calling the appropriate events.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.KeyboardManager.State">
            <summary>
            Gets the last known state of the keyboard.
            </summary>
            <remarks>
            Current when accessed after Update().
            </remarks>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyDown">
            <summary>
            An event called when a new key is pressed down.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyUp">
            <summary>
            An event called when a key is lifted.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyPressed">
            <summary>
            An event called when a key is pressed and released.
            </summary>
        </member>
        <member name="T:Glib.XNA.ImageFormat">
            <summary>
            Represents the format of a graphical image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.JPEG">
            <summary>
            A JPEG image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.PNG">
            <summary>
            A portable network graphics image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.GIF">
            <summary>
            A GIF image.
            </summary>
        </member>
        <member name="T:Glib.UniqueRandom">
            <summary>
            A random number generator generating only unique random numbers.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.#ctor">
            <summary>
            Create a new UniqueRandom random number generator.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.#ctor(System.Int32)">
            <summary>
            Create a new UniqueRandom random number generator with the specified seed.
            </summary>
            <param name="seed">The seed of the random number generator.</param>
        </member>
        <member name="M:Glib.UniqueRandom.Reset">
            <summary>
            Reset the list of generated numbers (integers, doubles, and bytes).
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.ResetInts">
            
            
            <summary>
            Reset the list of generated integers.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.ResetDoubles">
            <summary>
            Reset the list of generated doubles.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generate a random unique number between the two specified values.
            </summary>
            <param name="minValue">The inclusive lower bound of the number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the number to be generated.</param>
            <returns>A random number, unique within this instance, between the two specified values.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.Next(System.Int32)">
            <summary>
            Generate a random unique number lower than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the number to be generated.</param>
            <returns>A random number, unique within this instance, less than the specified value.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.Next">
            <summary>
            Generate a random, unique number.
            </summary>
            <returns>A random, unique number to this instance.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.NextDouble">
            <summary>
            Generate a random, unique double between 0.0 and 1.0.
            </summary>
            <returns>A random, unique double to this instance.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.NextBytes(System.Byte[])">
            <summary>
            Fill the elements of a specified array with bytes of non-unique random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:Glib.ObjectExtensions">
            <summary>
            Multiple type-to-type conversion methods acting as extensions on object.
            </summary>
        </member>
        <member name="M:Glib.ObjectExtensions.ToInt(System.Object)">
            <summary>
            Convert the specified object to an integer.
            </summary>
            <param name="o">The object to convert to an integer.</param>
            <returns>The integer representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToArrayString(System.Array,System.String)">
            <summary>
            Convert an array to a string.
            </summary>
            <param name="array">The array to convert.</param>
            <param name="delimiter">The delimiter between elements.</param>
            <returns>All elements of the array delimited by delimiter in a string.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Returns a private property Value from a given Object. Uses Reflection.
            </summary>
            <exception cref="T:System.ArgumentNullException">If obj is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the property is not found.</exception>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Returns a private field Value from a given Object. Uses Reflection.
            Throws an ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a _private_ Property Value from a given Object. Uses Reflection.
            Throws an ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">Value to set.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Set a private Property Value on a given Object. Uses Reflection.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">the value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the Property is not found</exception>
        </member>
        <member name="M:Glib.ObjectExtensions.CallPrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call a private method on an object through reflection.
            </summary>
            <remarks>
            A public method will not be included in the method search.
            </remarks>
            <param name="objToCallOn">The object to call a method on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="methodParams">The parameters to pass to the method.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Format(System.String,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]).
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Format(System.String,System.String@,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]), and sending the results to output.
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="output">The string to output the results to.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Double,System.Double)">
            <summary>
            Raise the specified number to a power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise a number to.</param>
            <returns>The number risen to a power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Single,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int16,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int32,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Decimal,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int64,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToDecimal(System.Object)">
            <summary>
            Convert the specified object into a decimal.
            </summary>
            <param name="o">The object to convert to a decimal.</param>
            <returns>The object represented as a decimal.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToShort(System.Object)">
            <summary>
            Convert the specified object to a short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The short representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToLong(System.Object)">
            <summary>
            Convert the specified object to a long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToFloat(System.Object)">
            <summary>
            Convert the specified object to a single-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a float.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToDouble(System.Object)">
            <summary>
            Convert the specified object to a double-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a double.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToBoolean(System.Object)">
            <summary>
            Convert the specified object to a boolean.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The boolean representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedShort(System.Object)">
            <summary>
            Convert the specified object to an unsigned short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The ushort representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedInt(System.Object)">
            <summary>
            Convert the specified object to a uint.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>This object represented as a UInt32.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedLong(System.Object)">
            <summary>
            Convert this object to an unsigned long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The unsigned long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Single)">
            <summary>
            Round a float to the nearest whole number.
            </summary>
            <param name="f">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Double)">
            <summary>
            Round a double to the nearest whole number.
            </summary>
            <param name="d">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Decimal)">
            <summary>
            Round a decimal to the nearest whole number.
            </summary>
            <param name="d">The decimal number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Implements(System.Type,System.Type)">
            <summary>
            Check if a type implements a given interface.
            </summary>
            <param name="cT">The type to check implementation of an interface on</param>
            <param name="t">The interface to check</param>
            <returns>Whether or not the object implements the given interface</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Cast``1(System.Object)">
            <summary>
            Cast this object to the specified type.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <returns>The object casted to T.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Cast``1(System.Object,``0@)">
            <summary>
            Cast this object to the specified type, and output the casted object to a variable.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <param name="castedObj">The object casted to T.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.AngleType">
            <summary>
            An enum representing a type of an angle measurement.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Radians">
            <summary>
            An angle in radians.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Degrees">
            <summary>
            An angle in degrees.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Gradians">
            <summary>
            An angle in gradians.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteRotation">
            <summary>
            A structure representing the rotation of a sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromRadians(System.Single)">
            <summary>
            Returns a SpriteRotation representing the specified value in radians.
            </summary>
            <param name="radians">The number of radians to represent in the new SpriteRotation.</param>
            <returns>A new SpriteRotation representing the specified value in radians.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromDegrees(System.Single)">
            <summary>
            Returns a SpriteRotation representing the specified value in degrees.
            </summary>
            <param name="degrees">The number of degrees to represent in the new SpriteRotation.</param>
            <returns>A new SpriteRotation representing the specified value in degrees.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Addition(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Add two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to add.</param>
            <param name="y">The second SpriteRotation to add.</param>
            <returns>A SpriteRotation representing the combined rotation values of x any y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_LessThan(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is less than y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_LessThanOrEqual(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is less than or equal to y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_GreaterThanOrEqual(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is greater than or equal to y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_GreaterThan(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is greater than y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Subtraction(Glib.XNA.SpriteLib.SpriteRotation,System.Single)">
            <summary>
            Subtract a SpriteRotation and a float representing a value in DEGREES.
            </summary>
            <param name="x">The SpriteRotation to subtract from.</param>
            <param name="y">The number of degrees to subtract from the SpriteRotation.</param>
            <returns>A SpriteRotation representing x.Degrees - y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Addition(Glib.XNA.SpriteLib.SpriteRotation,System.Single)">
            <summary>
            Add a SpriteRotation and a float representing a value in DEGREES.
            </summary>
            <param name="x">The SpriteRotation to add to.</param>
            <param name="y">The number of degrees to add to the SpriteRotation.</param>
            <returns>A SpriteRotation representing the combined rotation values of x any y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Subtraction(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Subtract two SpriteRotations.
            </summary>
            <param name="x">The base SpriteRotation.</param>
            <param name="y">The SpriteRotation to subtract from the base.</param>
            <returns>A SpriteRotation representing x.Degrees - y.Degrees.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.#ctor(System.Single)">
            <summary>
            Initialize a new SpriteRotation with the specified value of degrees.
            </summary>
            <param name="degrees">The number of degrees to initialize this SpriteRotation to</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.#ctor(System.Single,Glib.XNA.SpriteLib.AngleType)">
            <summary>
            Initialize a new SpriteRotation with the specified value using the specified unit.
            </summary>
            <param name="value">The value to initialize this SpriteRotation to.</param>
            <param name="measurementType">The type of angle that value represents.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Zero">
            <summary>
            Gets a SpriteRotation representing zero degrees.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.SpriteRotation.ValueChanged">
            <summary>
            An event fired when the rotation value of this <see cref="T:Glib.XNA.SpriteLib.SpriteRotation"/> changes.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Degrees">
            <summary>
            Gets or sets the rotation of the sprite in degrees.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Vector">
            <summary>
            Gets or sets a vector representing this angle.
            </summary>
            <remarks>
            All logic of this is handled by XnaExtensions.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Gradians">
            <summary>
            Gets or sets the rotation of the Sprite in gradians (AKA gons, grads, or grades).
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Radians">
            <summary>
            Gets or sets the rotation of the sprite in radians.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteMoveEventHandler">
            <summary>
            Handle when a sprite is going to be moved. This is a cancellable event.
            </summary>
            <param name="source">The sprite that is undergoing an attempt to be moved.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SpriteMoveEventArgs">SpriteMoveEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteClickEventHandler">
            <summary>
            Handle when a sprite has been clicked on. Called immediately after Update() on a Sprite.
            </summary>
            <param name="source">The SpriteManager that is managing this sprite, or, if this event is being called by the sprite itself, the sprite being clicked on.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SpriteMoveEventArgs">SpriteMoveEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteSheet">
            <summary>
            A class representing a Sprite from a sprite sheet. Supports sprite sheet animation.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.DefaultAnimationDelay">
            <summary>
            The default delay between animations in milliseconds.
            Set to 0 to update every call to Update().
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.CurrentSprite">
            <summary>
            The currently selected Sprite, where X is the zero-based column and Y is the zero-based row.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.GetDrawRegion(System.Int32,System.Int32)">
            <summary>
            Get the region drawn relative to the upper left corner of this SpriteSheet based on the given row and column.
            </summary>
            <param name="row">The zero-based row of sprites to draw from.</param>
            <param name="column">The zero-based column of sprites to draw from.</param>
            <returns>The region to draw with the gived row and column.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.SpriteSize">
            <summary>
            The size of one Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.AnimationDelay">
            <summary>
            The delay between changes of the sprite (animation) in this SpriteSheet, if any.
            </summary>
            <remarks>
            Set to no time to change every update.
            Set to null to not animate.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="sheet">The Texture2D of the actual sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="sheet">The Texture2D of the actual sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Content.ContentManager,System.String,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="manager">The ContentManager used to load the Texture2D of the ssprite sheet.</param>
            <param name="assetName">The asset name of the Texture2D containing the sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Call the Updated event of this SpriteSheet, and animate the SpriteSheet if applicable.
            </summary>
            <param name="gt">The GameTime object passed to a Game's Update(GameTime) method.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.Update">
            <summary>
            Call the Updated event of this SpriteSheet, WITHOUT ANIMATION TICKS.
            Will only animate if AnimationDelay is set to 0 milliseconds.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.RestartAnimation">
            <summary>
            Whether or not to restart the animation when completed.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.IsComplete">
            <summary>
            Whether or not the animation is complete.
            </summary>
            <remarks>
            Is always false if RestartAnimation is true.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.CurrentRow">
            <summary>
            The current zero-based row of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Width">
            <summary>
            A scale-sensitive width of 1 sprite. Use SpriteSize.Width not to account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Height">
            <summary>
            A scale-sensitive height of 1 sprite. Use SpriteSize.Height not to account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.CurrentColumn">
            <summary>
            The current zero-based column of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Columns">
            <summary>
            The number of columns of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Rows">
            <summary>
            The number of rows in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.IsAnimated">
            <summary>
            A boolean representing whether or not this SpriteSheet is automatically animated.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.DrawRegion">
            <summary>
            Gets the current drawing region of the SpriteSheet.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.SpriteSheet.AnimationCompleted">
            <summary>
            An event fired when the animation is completed, and either ends or is about to restart.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Origin">
            <summary>
            Gets the effective origin of the Sprite.
            </summary>
        </member>
    </members>
</doc>
